import { Component } from '@angular/core'; 

import jspdf from 'jspdf';
import html2canvas from 'html2canvas';
import { Router } from '@angular/router';
import { DataService } from 'src/app/services/data.service';
import { COLLECTION } from 'src/app/const/util';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { v4 as uuid} from 'uuid';
import { NgxSpinnerService } from "ngx-spinner";
import { Quote } from 'src/app/models/quote';
import { Inventory } from 'src/app/models/inventory';
import { Customer } from 'src/app/models/customer';
import {map, startWith} from 'rxjs/operators';
import {Observable} from 'rxjs';
import * as moment from 'moment'


@Component({
  selector: 'app-quotes',
  templateUrl: './quotes.component.html',
  styleUrls: ['./quotes.component.scss']
})
export class AppQuotesComponent {
  displayedColumns: string[] = ['quoteNo',  'quoteDate', 'companyName' ,'contactPerson', 'totalPriceInclusive', 'actionButton'];

  dataSource: Quote[] = [
    {
      id: "d9dfdd81-92d1-4b46-89f9-3f546b2386f0", 
      quoteNo: "FRST-100-000",
      quoteDate: "01/10/2023",
      quoteStartDate: "01/01/2024",
      quoteDueDate: "01/11/2024",
      quoteTerm: "30 days",
      customer: {
        id: "f9dfdd81-a2d1-4b46-8000-3f546b2386f0",
        url: "",
        companyName: "Freshwater Corp",
        companyVATNumber: "400100-10000",
        companyBillingAddress: "123 main str,steelfontein, Mpumalanga, 2010",
        companyShippingAddress: "123 main str,steelfontein, Mpumalanga, 2010",
        contactPersonFirstName: "Andile",
        contactPersonLastName: "Papo",
        contactPersonEmail: "andile@blueprint.com",
        contactPersonPhoneNumber: "0825003020",
        contactPersonTitle: "Mr.", 
      },
      items: [
        {
          id: "g9dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Teaspoon", 
          photo: "https://placehold.co/100",
          stockCode: "TSP-100", 
          description: "A very nice spoon",
          quantity: "10",
          unitPrice: "100",
          VAT: "0",
          discount: "0"
        },
        {
          id: "f0dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Fork", 
          photo: "https://placehold.co/100",
          stockCode: "FRK-100", 
          description: "A silcer fork",
          quantity: "5",
          unitPrice: "550",
          discount: "0",
          VAT: "0"
        },
        {
          id: "f0dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Chopping board", 
          photo: "https://placehold.co/100",
          stockCode: "CHB-100", 
          description: "A Plastic chopping board",
          quantity: "10",
          discount: "0",
          unitPrice: "270",
          VAT: "0"
        }
      ],
      totalPriceExclusive: "2500",
      totalVAT: "0",
      totalPriceDiscount: "100",
      totalPriceInclusive: "2400",
    },
    {
      id: "ff890d81-9090-4b46-89f9-3f546b2386f0", 
      quoteNo: "SCCND-100-000",
      quoteDate: "01/01/2024",
      quoteStartDate: "01/01/2024",
      quoteDueDate: "01/02/2024",
      quoteTerm: "30 days",
      customer: {
        id: "f9dfdd81-a2d1-4b46-8000-3f546b2386f0",
        url: "",
        companyName: "Dinokeng PTY Ltd",
        companyVATNumber: "400100-10000",
        companyBillingAddress: "123 Grey road, Bendor Parl, Polokwane, 2190",
        companyShippingAddress: "123 Grey road, Bendor Parl, Polokwane, 2190",
        contactPersonFirstName: "Moses",
        contactPersonLastName: "Thakgola",
        contactPersonEmail: "moses@dinokeng.com",
        contactPersonPhoneNumber: "0825003020",
        contactPersonTitle: "Mr.", 
      },
      items: [
        {
          id: "g9dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Pots", 
          photo: "https://placehold.co/100",
          stockCode: "LAB-200", 
          description: "designer ports",
          quantity: "40",
          unitPrice: "2400",
          discount: "0",
          VAT: "0"
        },
        {
          id: "f0dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Frying Pan", 
          photo: "https://placehold.co/100",
          stockCode: "FPN-09100", 
          description: "A non sticky frying pan",
          quantity: "2",
          unitPrice: "7500",
          discount: "0",
          VAT: "0"
        }
      ],
      totalPriceExclusive: "26400",
      totalVAT: "0",
      totalPriceDiscount: "50",
      totalPriceInclusive: "26400",
    }

  ];

  customers: Customer[] = [];
  inventoryItems: Inventory[] = [];

  selectedQuote: Quote = this.dataSource[0];
  editMode: boolean = false;
  newQuote: boolean = false;

  editQuote: Quote;
 
  quoteForm: any;
  inventoryItemForm: any;
  quotes: Quote[];
  autoGeneratedQuoteNumber: string;
  filteredCustomers: Observable<Customer[]>;
  customerFormControl = new FormControl<string | Customer>('');

  filteredInventoryItems: Observable<Inventory[] | any[]>;
  inventoryFormControl = new FormControl<string | Inventory>('');
  dynamicArray: any[] = [];
 
  constructor(private router: Router,
     private formBuilder: FormBuilder,
     private spinner: NgxSpinnerService,
     private dataService: DataService) {
  }
 


 
  ngOnInit(): void {
    this.getQuotes();
    //FIlter customer by name
    this.getCustomers(); 
    this.filterCustomers();
    this.autoGeneratedQuoteNumber = this.generateRandomCodeNumber();

    
    // this.getQuotes();
    this.getInventoryItems(); 
    this.filterInventoryItems();
    

    this.quoteForm = this.formBuilder.group({
      quoteStartDate: ['', Validators.required],
      quoteDueDate: ['', Validators.required],
    });
  } 

  addNewItem() {
    const val: Inventory = this.inventoryFormControl.value as Inventory;
    val.quantity = "1";
    this.dynamicArray.push(val);
  }

  deleteRow(index: number) {
    this.dynamicArray.splice(index, 1);
  }
  getValues() {
    console.log(this.dynamicArray);
  }
  

  getCustomers() {
    this.dataService.getAll(COLLECTION.CUSTOMERS).forEach((customers: any) => {
      console.log("customers ", customers);
      this.customers = customers;
    });
  }

  filterCustomers() {
    this.filteredCustomers = this.customerFormControl.valueChanges.pipe(
      startWith(''),
      map((value: any) => {
        const companyName = typeof value === 'string' ? value : value.companyName;
        return companyName ? this._customerFilter(companyName as string) : this.customers.slice();
      }),
    );
  }

  getInventoryItems() {
    this.dataService.getAll(COLLECTION.INVENTORY).forEach((inventoryItems: any) => {
      console.log("inventoryItems ", inventoryItems);
      this.inventoryItems = inventoryItems;
    });
  }

  filterInventoryItems() {
    this.getInventoryItems(); 
    // Filter inventory by name 
    this.filteredInventoryItems = this.inventoryFormControl.valueChanges.pipe(
      startWith(''),
      map((value: any) => {
        const inventoryItem = typeof value === 'string' ? value : value.name;
        return inventoryItem ? this._inventoryFilter(inventoryItem as string) : this.inventoryItems.slice();
      }),
    );
  }

  displayFn(customer: Customer): string {
    return customer && customer.companyName ? customer.companyName : '';
  }

  displayInventoryFn(item: Inventory): string {
    return item && item.name && item.stockCode ? item.name + " (" + item.stockCode + ")": '';
  }

  private _inventoryFilter(name: string): Inventory[] {
    const filterValue = name.toLowerCase();

    return this.inventoryItems.filter(inv => inv.name.toLowerCase().includes(filterValue));
  }

  private _customerFilter(name: string): Customer[] {
    const filterValue = name.toLowerCase();

    return this.customers.filter(cus => cus.companyName.toLowerCase().includes(filterValue));
  }

  generateRandomCodeNumber(): string {
    return "QUO-" + Math.floor(Math.random()*90000) + 10000;
  }

  createNewQuote() {
    console.log("Customer ", this.customerFormControl.value);
    console.log("Items ", this.dynamicArray);
    console.log("Date ", this.quoteForm.value);

    const dates = this.quoteForm.value;
    let start_Date = moment(dates.quoteDate);
    let end_Date = moment(dates.quoteDueDate);
    let totalDays = end_Date.diff(start_Date, 'days');

    let totalPriceDiscount = 0;
    let totalVAT = 0;
    let totalPriceExclusive = 0;
     this.dynamicArray.forEach(item => { 
        totalPriceDiscount += (+item.discount);
        totalVAT += (+item.VAT);
        totalPriceExclusive += (+item.unitPrice * +item.quantity)
     
    });
    
    let newQuote: Quote = {
      id: uuid(),
      customer: this.customerFormControl.value as Customer,
      items: this.dynamicArray,
      quoteDate: moment().format(),
      quoteStartDate: dates.quoteStartDate,
      quoteDueDate: dates.quoteDueDate,
      quoteNo: this.autoGeneratedQuoteNumber,
      quoteTerm: totalDays.toString(),
      totalPriceDiscount: totalPriceDiscount.toString(),
      totalVAT: totalVAT.toString(),
      totalPriceExclusive: totalPriceExclusive.toString(),
      totalPriceInclusive: (totalPriceExclusive + totalVAT - totalPriceDiscount).toString(),
      createdBy: "Donald Kgomo",
      createdOn:  moment().format(),
      updatedBy: "",
      updatedOn: ""
    };
 
    console.log("Quote ", newQuote);
    this.dataService.addItem(newQuote, COLLECTION.QUOTES).forEach(res => {
      console.log(res);
      this.getQuotes();
      this.editMode = false;
    });
    
  }

  cancel() {
    this.editMode = false;
  }

  createQuote() {
    this.editMode = true;
    this.newQuote = true;
  }

  addQuote() { 
    const form = this.quoteForm.value;
    const quote: Quote = {
      id: "ff890d81-9090-4b46-89f9-3f546b2386f0", 
      quoteNo: "SCCND-100-000",
      quoteDate: "01/01/2024",
      quoteDueDate: "01/02/2024",
      quoteStartDate: "01/01/2024",
      quoteTerm: "30 days",
      customer: {
        id: "f9dfdd81-a2d1-4b46-8000-3f546b2386f0",
        url: "",
        companyName: "Blue Print Media",
        companyVATNumber: "VAT-100-10000",
        companyBillingAddress: "123 main str,steelfontein, Mpumalanga, 2010",
        companyShippingAddress: "123 main str,steelfontein, Mpumalanga, 2010",
        contactPersonFirstName: "Sisanda",
        contactPersonLastName: "Mawela",
        contactPersonEmail: "sisanda@blueprint.com",
        contactPersonPhoneNumber: "0825003020",
        contactPersonTitle: "Mrs.", 
      },
      items: [
        {
          id: "g9dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Teaspoon", 
          photo: "https://placehold.co/100",
          stockCode: "TSP-100", 
          description: "A very nice spoon",
          quantity: "2",
          discount: "0",
          VAT: "0",
          unitPrice: "2400"
        },
        {
          id: "f0dfdd81-a2d1-4b46-c7a8a-3f546b2386f1", 
          name: "Fork", 
          photo: "https://placehold.co/100",
          stockCode: "FRK-100", 
          description: "A silcer fork",
          quantity: "5",
          discount: "0",
          VAT: "0",
          unitPrice: "50"
        }
      ],
      totalPriceExclusive: "450",
      totalVAT: "0",
      totalPriceDiscount: "0",
      totalPriceInclusive: "450",
      createdOn: "" + new Date().getTime(),
      createdBy: "Donald Kgomo", 
      updatedOn: "" + new Date().getTime(),
      updatedBy: "Donald Kgomo"
    }

    if(this.newQuote) {
      quote.id = uuid();
      this.dataService.addItem(quote, COLLECTION.QUOTES).forEach((res: any) => {
        console.log("Quote added successfully ", res);
        this.editMode = false;
        this.getQuotes();
      });
    } else {
      quote.id = this.editQuote.id,
      this.dataService.updateItem(quote, COLLECTION.QUOTES).forEach((res: any) => {
        console.log("Quote updated successfully ", res);
        this.editMode = false;
        this.getQuotes();
      }); 
    }
  }

  addNewQuote() {
    this.editMode = true;
    this.newQuote = true;
  }

  getTotalPrice(item: Inventory) {
    return +item.unitPrice * +item.quantity;
  }
 
  cancelEditQuote() {
    this.editMode = false;
  }

  getQuotes() {
    this.spinner.show();

    this.dataService.getAll(COLLECTION.QUOTES).forEach((quotes: any) => {
      console.log("quotes ", quotes);
      this.quotes = quotes;
      this.spinner.hide();
    });
  }
  
  viewQuoteDetails(quote: Quote){
    this.editMode = true;
    this.editQuote = quote; 

  }

  downloadQuote(quote: Quote) {
    this.selectedQuote = quote;
    this.convetToPDF();
  }

  convetToPDF() {
    this.spinner.show();

    var data = document.getElementById('contentToConvert');
      html2canvas((data as any)).then(canvas => {
      // Few necessary setting options
        var imgWidth = 208;
        var pageHeight = 295;
        var imgHeight = canvas.height * imgWidth / canvas.width;
        var heightLeft = imgHeight;
        
        const contentDataURL = canvas.toDataURL('image/png')
        let pdf = new jspdf('p', 'mm', 'a4'); // A4 size page of PDF
        var position = 0;
        pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight)
        pdf.save('new-file.pdf'); // Generated PDF
        this.spinner.hide();
      });
  }

}

