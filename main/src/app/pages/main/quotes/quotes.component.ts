import { Component, ElementRef, ViewChild } from '@angular/core'; 

import { DataService } from 'src/app/services/data.service';
import { COLLECTION, STORAGE } from 'src/app/const/util';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { NgxSpinnerService } from "ngx-spinner";
import { Quote } from 'src/app/models/quote';
import { Inventory, InventoryItem } from 'src/app/models/inventory';
import { Customer } from 'src/app/models/customer';
import {map, startWith} from 'rxjs/operators';
import {Observable} from 'rxjs';
import * as moment from 'moment'
import { Company } from 'src/app/models/company';
import { User } from 'src/app/models/user';
import { MatDialog } from '@angular/material/dialog';
import { ShareDialogComponent } from './share/share.component';
import { Invoice } from 'src/app/models/invoice';
import { SalesOrder } from 'src/app/models/sales-order';
import { DocumentPreviewDialogComponent } from '../document-preview/document-preview.component';
import { Document } from 'src/app/models/document';

@Component({
  selector: 'app-quotes',
  templateUrl: './quotes.component.html',
  styleUrls: ['./quotes.component.scss']
})
export class AppQuotesComponent {
  displayedColumns: string[] = ['quoteNo',  'quoteDate','items' ,'totalPriceInclusive', 'hasSalesOrder','manageAction'];
  quotePreviewColumnDisplay: string[] = ['name', 'stockCode', 'unitPrice', 'quantity', 'totalPrice']

  customers: Customer[] = [];
  inventoryItems: Inventory[] = [];
  autoGeneratedQuoteNumber: string;
  selectedQuote: Quote = {
    hasSalesOrder: false,
    customer: {
      name: "",
      phoneNumber: "",
      emailAddress: "",
      registrationNumber: "",
      shippingAddress: "",
      photo: "",
      VATNumber: "", 
      billingAddress: "",
      contactPerson: {
        emailAddress: "", firstName: "", gender: "", lastName: "", phoneNumber: "", title: ""
      },
    },
    company: {
      name: "",
      phoneNumber: "",
      emailAddress: "",
      registrationNumber: "",
      shippingAddress: "",
      photo: "",
      VATNumber: "",

      bankDetails:  {
        accountNumber: "", branchCode: "", bankName: ""
      },
      billingAddress: "",
      contactPersonId: ""
    },
    items: [],
    quoteDate: new Date(),
    quoteDueDate: new Date(),
    quoteNo: "",
    quoteStartDate: new Date(),
    quoteTerm: 0,
    totalPriceDiscount: 0,
    totalPriceExclusive: 0,
    totalPriceInclusive: 0,
    totalVAT: 0
  };

  isEditQuoteMode: boolean = false;
  isPreviewQuoteMode: boolean = false;
  isNewQuote: boolean = false;

  quoteToProcess: Quote;
  updatedQuote: Quote;
  quoteForm: any;
  quotes: Quote[] = [];
  filteredCustomers: Observable<Customer[]>;
  customerFormControl = new FormControl<string | Customer>('');
  filteredInventoryItems: Observable<Inventory[] | any[]>;
  inventoryFormControl = new FormControl<string | Inventory>('');
  dynamicArray: Inventory[] = [];
  currentCompany: Company;
  loggedInUser: User;
  mailToString: string;

  isNewLook: boolean = true;
  activeIndex: number;
  document: Document;


  @ViewChild('searchbar') searchbar: ElementRef;
  searchText = '';

  toggleSearch: boolean = false;


  constructor(
    private formBuilder: FormBuilder,
     private spinner: NgxSpinnerService,
     public dialog: MatDialog,
     private dataService: DataService) {
  }
  
  openSearch() {
    this.toggleSearch = true;
    this.searchbar.nativeElement.focus();
  }
  searchClose() {
    this.searchText = '';
    this.toggleSearch = false;
  }
 
  ngOnInit(): void {
    this.getCompany();
    this.getQuotes();
    this.getCustomers(); 

    this.filterCustomers();
    
    this.getInventoryItems(); 
    this.filterInventoryItems();

    this.loggedInUser = this.dataService.getStorage(STORAGE.USER);

    this.quoteForm = this.formBuilder.group({
      quoteStartDate: ['', Validators.required],
      quoteDueDate: ['', Validators.required],
    });
  } 

  
  private getQuotes() {
    this.spinner.show();
    this.dataService.getAll(COLLECTION.QUOTES).subscribe((quotes: any) => {
      console.log("quotes ", quotes);
      this.quotes = quotes;
      //new look
      this.selectedQuote = quotes[0]; 
      this.activeIndex = 0;
      this.spinner.hide();
    }, err => {
      console.log(err);
      this.spinner.hide();
    });
  }

  private getCompany() {
    this.dataService.getAll(COLLECTION.COMPANIES).forEach((currentCompany: any) => {
      console.log("currentCompany ", currentCompany);
      this.currentCompany = currentCompany[0];
    });
  }

  private getCustomers() {
    this.dataService.getAll(COLLECTION.CUSTOMERS).forEach((customers: any) => {
      console.log("customers ", customers);
      this.customers = customers;
    });
  }

  private getInventoryItems() {
    this.dataService.getAll(COLLECTION.INVENTORY).forEach((inventoryItems: any) => {
      console.log("inventoryItems ", inventoryItems);
      this.inventoryItems = inventoryItems;
    });
  }

  private createNewQuote(quote: Quote) {
    this.spinner.show();
    this.dataService.addItem(quote, COLLECTION.QUOTES).subscribe(res => {
      this.getQuotes();
      this.isEditQuoteMode = false;
      this.isPreviewQuoteMode = false;

    }, err => {
      this.spinner.hide();
    });
  }

  private updateExistingQuote(quote: Quote) {
    this.spinner.show();
    this.dataService.updateItem(quote, COLLECTION.QUOTES).subscribe(res => {
      this.getQuotes();
      this.isEditQuoteMode = false;
      this.isPreviewQuoteMode = false;
    }, err => {
      this.spinner.hide();
    });
  }

  private _inventoryFilter(name: string): Inventory[] {
    const filterValue = name.toLowerCase();

    return this.inventoryItems.filter(inv => inv.name.toLowerCase().includes(filterValue));
  }

  private _customerFilter(name: string): Customer[] {
    const filterValue = name.toLowerCase();

    return this.customers.filter(cus => cus.name.toLowerCase().includes(filterValue));
  }


  documentAction(action: string) {
    if(action === 'edit') {
      console.log('Edit doc');
      this.editQuoteToBeProcessed();
    } else if(action === 'download') {
      console.log('Download doc');
      this.downloadAsPDF();
      
    } else if(action === 'gen-sales-order') {
      console.log('Generate Sales Order');
      this.generateSalesOrder();
      
    }
  
  }

  addNewItem() {
    const val: Inventory = this.inventoryFormControl.value as Inventory;
    const item: InventoryItem  = {
      id: val._id,
      name: val.name, 
      photo: val.photo,
      stockCode: val.stockCode, 
      description: val.description,
      quantity: 1,
      costPrice: val.costPrice,
      sellingPrice: val.sellingPrice,
      discountPrice: val.discountPrice,
      discountPercentage: val.discountPercentage,
      VAT: val.VAT
    }
    // const found = this.dynamicArray.find((u) => u.stockCode === item.stockCode);
    this.dynamicArray.push(item);
    this.inventoryFormControl.patchValue('');
  }

  deleteRow(index: number) {
    this.dynamicArray.splice(index, 1);
  }

  getValues() {
    console.log(this.dynamicArray);
  }
  
  formatDate(date?: Date) {
    return moment(date).format('DD/MM/YYYY');  
  }
  
  formatAddress(address: string): string[] {
    const addNewLine = address.split('\n');
    const addComma = address.split(',');

    if(addNewLine.length > 0) {
      return addNewLine;
    }
    else if(addComma.length > 0) {
      return addComma;
    } else {
      return [address]; 
    }
  }
 
  filterCustomers() {
    this.filteredCustomers = this.customerFormControl.valueChanges.pipe(
      startWith(''),
      map((value: any) => {
        const name = typeof value === 'string' ? value : value.name;
        return name ? this._customerFilter(name as string) : this.customers.slice();
      }),
    );
  }

  filterInventoryItems() {
    this.getInventoryItems(); 
    // Filter inventory by name 
    this.filteredInventoryItems = this.inventoryFormControl.valueChanges.pipe(
      startWith(''),
      map((value: Inventory | any) => {
        const inventoryItem = typeof value === 'string' ? value : value.name;
        return inventoryItem ? this._inventoryFilter(inventoryItem as string) : this.inventoryItems.slice();
      }),
    );
  }

  displayFn(customer: Customer): string {
    return customer && customer.name ? customer.name : '';
  }

  displayInventoryFn(item: Inventory): string {
    return item && item.name && item.stockCode ? item.name + " (" + item.stockCode + ")": '';
  }


  addOrUpdateQuote(newQt: boolean = true) {

    console.log("new quote ? ", newQt);
    
    const dates = this.quoteForm.value;
    let start_Date = moment(dates.quoteDate);
    let end_Date = moment(dates.quoteDueDate);
    let totalDays = end_Date.diff(start_Date, 'days');

    let totalPriceDiscount = 0;
    let totalVAT = 0;
    let totalPriceExclusive = 0;
     this.dynamicArray.forEach((item: any) => { 
        totalPriceDiscount += (+item.discountPrice);
        totalVAT += (+item.VAT);
        totalPriceExclusive += (+item.sellingPrice * +item.quantity)
    });
    
    
    let quote: Quote = {
      customer: this.customerFormControl.value as Customer,
      company: this.currentCompany,
      items: this.dynamicArray,
      quoteDate: new Date(),
      quoteStartDate: dates.quoteStartDate,
      quoteDueDate: dates.quoteDueDate,
      quoteNo: this.autoGeneratedQuoteNumber,
      quoteTerm: totalDays,
      totalPriceDiscount: totalPriceDiscount,
      totalVAT: totalVAT,
      totalPriceExclusive: totalPriceExclusive,
      totalPriceInclusive: (totalPriceExclusive + totalVAT - totalPriceDiscount),
      hasSalesOrder: false,
      createdBy: this.loggedInUser._id,
      createdOn: newQt ? new Date() : this.selectedQuote.createdOn,
      updatedBy: this.loggedInUser._id,
      updatedOn: new Date()
    };
 
    if(newQt) {
      this.createNewQuote(quote);
    } else {
      quote._id = this.selectedQuote._id;
      this.updateExistingQuote(quote);
    }
    
  } 

  manageAndShareQuote(quote: Quote) {
    console.log(quote);
    this.isEditQuoteMode = false;
    this.isPreviewQuoteMode = true;
    this.selectedQuote = quote;
  }

 
  cancel() {
    this.isEditQuoteMode = false;
    this.isPreviewQuoteMode = false;
  }

  createQuote() {
    this.isEditQuoteMode = true;
    this.isPreviewQuoteMode = false;
    this.isNewQuote = true;
    this.autoGeneratedQuoteNumber = this.dataService.generateRandomCodeNumber("QUO-");
    this.quoteForm.reset();
    this.dynamicArray = [];
  }
 
 
  getTotalPrice(item: Inventory) {
    return +item.costPrice * +item.quantity;
  }
  

  generateQouteDocument(quote: Quote) {
    this.selectedQuote = quote;
    this.openDialog();
  }


  // new look 
  loadDocumentPreview(quote: Quote) {
    const dialogHandler = this.dialog.open(DocumentPreviewDialogComponent, {
      // width: '420px',
      data: {
        quote
      },
      disableClose: true
    });

     
    dialogHandler.afterClosed().subscribe((res)=> {
      console.log(res);
      // if(res == 'share') {
      //   this.dataService.convetToPDF('contentToConvert');
      // } else if(res == 'download') {
      //   this.dataService.convetToPDF('contentToConvert');
      // } else {
      //   console.log("Closed");
      // }
      
    })
  } 

  activateQuote(quote: Quote, index: number) {
    this.selectedQuote = quote;
    this.activeIndex = index; 
  }





  openDialog(): void {
    const dialogHandler = this.dialog.open(ShareDialogComponent, {
      width: '420px',
      data: {
        title: "Generate Quote",
        subHeader: "Your qoute has been generated as a (PDF) document. You can: "
      },
      disableClose: true
    });

     
    dialogHandler.afterClosed().subscribe((res)=> {
      console.log(res);
      if(res == 'share') {
        this.dataService.convetToPDF('contentToConvert');
      } else if(res == 'download') {
        this.dataService.convetToPDF('contentToConvert');
      } else {
        console.log("Closed");
      }
      
    })
  } 
  /// INVOICE - PROCESS QUOTE

  
  processQuote(quote: Quote) {
    this.isEditQuoteMode = false;
    this.isPreviewQuoteMode = true;
    this.quoteToProcess  = quote;
    this.selectedQuote = quote; 
    this.mailToString = `mailto:${this.selectedQuote.customer.emailAddress},${this.selectedQuote.customer.contactPerson.emailAddress}?subject=Quote%20no%20${this.selectedQuote.quoteNo}&amp;body=Please%20find%20the%20requested%20quote%20attached%20`;
  }

  private editQuoteToBeProcessed() { 
    this.isPreviewQuoteMode = false;
    this.isEditQuoteMode = true;
    this.isNewQuote = false;
    this.isNewLook = true;

    this.quoteForm.controls['quoteDueDate'].setValue(this.selectedQuote.quoteDueDate);
    this.quoteForm.controls['quoteStartDate'].setValue(this.selectedQuote.quoteStartDate);
    
    this.customerFormControl.setValue(this.selectedQuote.customer)
    this.inventoryFormControl.setValue(this.selectedQuote.items[0])
    
    this.autoGeneratedQuoteNumber = this.selectedQuote.quoteNo;

    this.dynamicArray = this.selectedQuote.items;
  
    this.inventoryFormControl.patchValue('');
     
    
  }

  generateSalesOrder() {
    console.log(this.quoteToProcess);
    console.log(this.currentCompany);

    let newSalesOrder: SalesOrder = {
      salesOrderNo: this.dataService.generateRandomCodeNumber("SLO-"),
      salesOrderDate: new Date(),
      customer: this.selectedQuote.customer,
      company: this.selectedQuote.company, 
      quote: this.quoteToProcess._id, 
      createdOn: new Date(),
      createdBy: this.dataService.getStorage(STORAGE.USER)._id,
      updatedOn: new Date(),
      updatedBy: this.dataService.getStorage(STORAGE.USER)._id,
    }
    
    this.spinner.show();
    this.dataService.addItem(newSalesOrder, COLLECTION.SALES_ORDER).subscribe((res) => {
      console.log(res);
      this.isPreviewQuoteMode = false;
      this.isEditQuoteMode = false;
      
      this.selectedQuote.hasSalesOrder = true;
      this.selectedQuote.salesOrder = res._id;
      this.dataService.updateItem(this.selectedQuote, COLLECTION.QUOTES).subscribe(res => {
        this.spinner.hide();
      }, err => {
        console.log(err);
        this.spinner.hide();
      })
    }, err => {
      console.log(err);
      this.spinner.hide();
    })

  }

  downloadAsPDF() {
    this.dataService.convetToPDF('qouteDocument')
  }
  
 

}

 